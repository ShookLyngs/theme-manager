var e=Object.assign;import{cloneDeep as t}from"lodash";function n(e){const t=String(e);return t.startsWith("--")?t:`--${t}`}function r(e,t=[],n={}){return Object.keys(e).reduce(((o,c)=>{const u=e[c],s=[...t,c];return"string"==typeof u?o[s.join("-")]=u:o=r(u,s,n),o}),n)}function o(e){return{value:e instanceof Function?e():e}}function c(t){const{colors:n}=t.value.data;return e({},n)}function u(e){return e.reduce(((e,t)=>{const o=t.value.data;return Object.keys(o).forEach((t=>{const c=function(e){const t=r(e);return Object.keys(t).reduce(((e,t)=>(e[t]=`var(${n(t)})`,e)),{})}(o[t]);Object.keys(c).forEach((n=>{e[t]||(e[t]=[]),e[t].includes(n)||e[t].push(n)}))})),e}),{})}function s(e){const t=function(e){let t,n=i(),r=[];if(Array.isArray(e)){if(!e.length)throw new Error("'themes' must be filled");r=[...e]}else if(o=e,"[object Object]"===Object.prototype.toString.apply(o)){const{element:t,themes:o}=e;n&&(n=t),Array.isArray(r)&&(r=o)}var o;t=r[0];const c={element:n,themes:r,theme:t};n&&a(c,r[0]);return c}(e);return t.setTheme=e=>a(t,e),t}function i(){try{const e=document.querySelector(":root");return e||void 0}catch(e){return}}function a(e,o){if("string"==typeof o){const t=e.themes.find((e=>e.value.name===o));if(!t)return!1;o=t}const u=c(o=t(o));return!!e.element&&(function(e,t){if(!e)return;const o=r(t);Object.keys(o).forEach((t=>{e.style.setProperty(n(t),o[t])}))}(e.element,u),e.themeValueUpdater instanceof Function?e.themeValueUpdater(o):e.theme.value=o.value,!0)}function f(t){const n=u(t.themes);return{theme:{extend:e({},l(n))}}}function l(e){return Object.keys(e).reduce(((t,r)=>(t[r]||(t[r]={}),e[r].forEach((e=>{t[r][e]=`var(${n(e)})`})),t)),{})}export{i as createDefaultElement,f as createTailwindPreset,l as createTailwindThemeData,o as createTheme,s as createThemer,c as createUsefulThemeVariables,u as getThemeDataShape,a as setTheme};
