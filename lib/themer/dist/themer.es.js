var e=Object.assign;function t(e){const t=String(e);return t.startsWith("--")?t:`--${t}`}function n(e,t=[],r={}){return Object.keys(e).reduce(((c,o)=>{const u=e[o],s=[...t,o];return"string"==typeof u?c[s.join("-")]=u:c=n(u,s,r),c}),r)}function r(e){return{value:e instanceof Function?e():e}}function c(t){const{colors:n}=t.value.data;return e({},n)}function o(e){return e.reduce(((e,r)=>{const c=r.value.data;return Object.keys(c).forEach((r=>{const o=function(e){const r=n(e);return Object.keys(r).reduce(((e,n)=>(e[n]=`var(${t(n)})`,e)),{})}(c[r]);Object.keys(o).forEach((t=>{e[r]||(e[r]=[]),e[r].includes(t)||e[r].push(t)}))})),e}),{})}function u(t){const n=function(e){let t,n=s(),r=[];if(Array.isArray(e)){if(!e.length)throw new Error("'themes' must be filled");r=[...e]}else if(c=e,"[object Object]"===Object.prototype.toString.apply(c)){const{element:t,themes:c}=e;n&&(n=t),Array.isArray(r)&&(r=c)}var c;t=r[0];const o={element:n,themes:r,theme:t};n&&i(o,r[0]);return o}(t);return e(e({},n),{setTheme:e=>i(n,e)})}function s(){try{const e=document.querySelector(":root");return e||void 0}catch(e){return}}function i(e,r){if("string"==typeof r){const t=e.themes.find((e=>e.value.name===r));if(!t)return!1;r=t}const o=c(r);return!!e.element&&(function(e,r){if(!e)return;const c=n(r);Object.keys(c).forEach((n=>{e.style.setProperty(t(n),c[n])}))}(e.element,o),e.theme.value=r.value,!0)}function a(t){const n=o(t.themes);return{theme:{extend:e({},f(n))}}}function f(e){return Object.keys(e).reduce(((n,r)=>(n[r]||(n[r]={}),e[r].forEach((e=>{n[r][e]=`var(${t(e)})`})),n)),{})}export{s as createDefaultElement,a as createTailwindPreset,f as createTailwindThemeData,r as createTheme,u as createThemeManager,c as createUsefulThemeVariables,o as getThemeDataShape,i as setTheme};
